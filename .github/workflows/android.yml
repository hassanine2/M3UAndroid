name: Android CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/**'
      - '.idea/**'
      - 'fastlane/**'
      - '!.github/workflows/**'
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      skip-tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx6g -Dorg.gradle.daemon=false"
  JAVA_VERSION: "17"

jobs:
  # Code Quality Check (Basic)
  code-quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Cache Key
        id: cache-key
        run: |
          echo "key=gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}" >> $GITHUB_OUTPUT

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "zulu"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: false

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v3

      - name: Check Build Configuration
        run: ./gradlew projects --info

  # Build and Test
  build-and-test:
    name: 🏗️ Build APKs
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 45
    
    strategy:
      matrix:
        module: [smartphone, tv]
      fail-fast: false
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "zulu"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: true

      - name: Clean GMD
        run: ./gradlew cleanManagedDevices --unused-only

      - name: Build Release APK
        run: |
          ./gradlew :app:${{ matrix.module }}:assembleRelease \
            -Pandroid.testInstrumentationRunnerArguments.androidx.benchmark.enabledRules=BaselineProfile \
            -Pandroid.testoptions.manageddevices.emulator.gpu="swiftshader_indirect" \
            -Pandroid.experimental.testOptions.managedDevices.emulator.showKernelLogging=true \
            -Pandroid.experimental.androidTest.numManagedDeviceShards=1 \
            -Pandroid.experimental.testOptions.managedDevices.maxConcurrentDevices=1

      - name: Get APK Size
        id: apk-size
        run: |
          APK_PATH="app/${{ matrix.module }}/build/outputs/apk/release"
          if [ -d "$APK_PATH" ]; then
            APK_SIZE=$(du -h $APK_PATH/*.apk | cut -f1 | head -1)
            echo "size=$APK_SIZE" >> $GITHUB_OUTPUT
            echo "📱 ${{ matrix.module }} APK size: $APK_SIZE"
          fi

      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.module }}
          path: |
            app/${{ matrix.module }}/build/outputs/apk/release/*.apk
          retention-days: 30

  # Deployment and Notifications
  deploy-and-notify:
    name: 🚀 Deploy & Notify  
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
    timeout-minutes: 15
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare Release Assets
        run: |
          mkdir -p release/
          find artifacts/ -name "*.apk" -path "*/apk-*/*" -exec cp {} release/ \;
          ls -la release/

      - name: Upload Combined Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-apks
          path: release/*.apk
          retention-days: 90

      - name: Upload To Telegram
        if: success()
        continue-on-error: true
        uses: xireiki/channel-post@v1.0.10
        with:
          bot_token: ${{ secrets.BOT_TOKEN }}
          chat_id: ${{ secrets.CHAT_ID }}
          api_id: ${{ secrets.API_ID }}
          api_hash: ${{ secrets.API_HASH }}
          large_file: true
          method: sendFile
          path: release/*.apk

  # Summary Report
  build-summary:
    name: 📊 Build Summary
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test]
    if: always()
    
    steps:
      - name: Generate Build Summary
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "✅ Code Quality: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code Quality: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-and-test.result }}" == "success" ]; then
            echo "✅ Build: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Smartphone APK" >> $GITHUB_STEP_SUMMARY
          echo "- TV APK" >> $GITHUB_STEP_SUMMARY
